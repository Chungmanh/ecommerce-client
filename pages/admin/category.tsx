import type { ReactElement } from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tfoot,
  Tr,
  Th,
  Td,
  TableCaption,
  TableContainer,
  IconButton,
  useDisclosure,
  Badge,
  Button,
} from '@chakra-ui/react';
import Head from 'next/head';
import TableOrder from '../../components/TableOrder';
import ItemInHistoryOrderCustomer from '../../components/Order/ItemInHistoryOrderCustomer';
import CategoryModal from '../../components/CategoryModalAdmin';
import { MdStorefront } from 'react-icons/md';
import { IoAdd } from 'react-icons/io5';
import { BsTrash3 } from 'react-icons/bs';
import { CiEdit } from 'react-icons/ci';
import {
  getAllCategory,
  deleteCategory,
  ICategory,
} from '../../common/admin/categoryApi';
import { useState, useEffect } from 'react';
import LayoutAdmin from '../../components/LayoutAdmin';
import Swal from 'sweetalert2';

const Category = () => {
  const [categories, setCategories] = useState<any[]>([]);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [categoryId, setCategoryId] = useState('');

  const reloadPage = async () => {
    await getCategories();
  };

  const handleEditCategory = (id: string) => {
    setCategoryId(id);
    onOpen();
  };

  const handleDeleteCategory = async (id: string) => {
    Swal.fire({
      title: 'Bạn có chắc chắn?',
      text: 'Xác nhận xóa danh mục này!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Xác nhận',
    }).then(async (result) => {
      if (result.isConfirmed) {
        const deleted = await deleteCategory(id);
        if (deleted && Object.keys(deleted).length !== 0) {
          Swal.fire('Đã xóa!', 'Xóa thành công', 'success');
          await reloadPage();
        } else {
          Swal.fire('Error!', 'ko xoa dc.', 'error');
        }
      }
    });
  };

  async function getCategories() {
    const listCategories = await getAllCategory();
    setCategories(listCategories);
  }

  useEffect(() => {
    console.log('run useEffect');
    getCategories();
    if (!isOpen) {
      setCategoryId('');
    }
  }, [isOpen]);

  return (
    <div>
      <Head>
        <title>My Order</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box sx={{ padding: '20px 0px 50px 0px' }}>
        <Button
          leftIcon={<IoAdd />}
          colorScheme="teal"
          size={'sm'}
          m={2}
          onClick={onOpen}
        >
          Thêm mới
        </Button>
        <Box display={'flex'} sx={{ margin: '0 auto' }}>
          <TableContainer>
            <Table variant="simple">
              <TableCaption>Thông tin danh mục sản phẩm</TableCaption>
              <Thead>
                <Tr>
                  <Th textAlign={'center'}>STT</Th>
                  <Th textAlign={'center'}>Tên danh mục</Th>
                  <Th textAlign={'center'}>Ảnh</Th>
                  <Th textAlign={'center'}>Mô tả</Th>
                  <Th textAlign={'center'}>Trạng thái</Th>
                  <Th textAlign={'center'}>Thao tác</Th>
                </Tr>
              </Thead>
              <Tbody>
                {categories &&
                  categories?.length > 0 &&
                  categories?.map((category, index) => (
                    <Tr key={category._id}>
                      <Td>{index + 1}</Td>
                      <Td>{category?.name || ''}</Td>
                      <Td>
                        <img
                          src={`${category?.avatar}` || ''}
                          style={{
                            width: '50px',
                            height: '50px',
                            objectFit: 'cover',
                          }}
                        />
                      </Td>
                      <Td>{category?.description || ''}</Td>
                      <Td textAlign={'center'}>
                        {category?.status ? (
                          <Badge
                            textTransform={'capitalize'}
                            colorScheme="green"
                          >
                            Active
                          </Badge>
                        ) : (
                          <Badge textTransform={'capitalize'} colorScheme="red">
                            InActive
                          </Badge>
                        )}
                      </Td>
                      <Td>
                        <Box
                          sx={{
                            display: 'flex',
                            justifyContent: 'space-between',
                          }}
                        >
                          <CiEdit
                            size={18}
                            style={{
                              cursor: 'pointer',
                            }}
                            onClick={() => handleEditCategory(category._id)}
                          />
                          <BsTrash3
                            size={16}
                            style={{
                              cursor: 'pointer',
                            }}
                            onClick={() => handleDeleteCategory(category._id)}
                          />
                        </Box>
                      </Td>
                    </Tr>
                  ))}
              </Tbody>
              {/* <Tfoot>
              <Tr>
                <Th>To convert</Th>
                <Th>into</Th>
                <Th isNumeric>multiply by</Th>
              </Tr>
            </Tfoot> */}
            </Table>
          </TableContainer>
        </Box>
      </Box>
      <CategoryModal
        isOpen={isOpen}
        onClose={onClose}
        categoryId={categoryId}
      />
    </div>
  );
};

Category.getLayout = function getLayout(page: ReactElement) {
  return <LayoutAdmin>{page}</LayoutAdmin>;
};

export default Category;
